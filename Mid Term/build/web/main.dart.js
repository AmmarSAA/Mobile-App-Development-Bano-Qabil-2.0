// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk'], (function load__zapp_user_main(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var bank_account = Object.create(dart.library);
  var student = Object.create(dart.library);
  var $toString = dartx.toString;
  var $add = dartx.add;
  var $remove = dartx.remove;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///zapp/project/lib/classes/bank_account.dart",
    "file:///zapp/project/lib/classes/student.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.main = function main$0() {
    let bankAccount1 = new bank_account.BankAccount.new(234657, 24000, "Current", 2.3);
    bankAccount1.deposite(1000);
    bankAccount1.withDraw(26000);
    bankAccount1.addInterest();
    bankAccount1.display();
    let bankAccount2 = new bank_account.BankAccount.new(125436, 21000, "Saving", 2.4);
    bankAccount2.deposite(1000);
    bankAccount2.withDraw(20000);
    bankAccount2.addInterest();
    bankAccount2.display();
    let student1 = new student.Student.new("Ammar", 2345, T.JSArrayOfString().of(["Math", "Chemistry", "Physics"]));
    student1.addCourse("Computer");
    student1.displayCourses();
    let student2 = new student.Student.new("Ahmed", 6857, T.JSArrayOfString().of(["Mobile App Developer", "AI ChatBot Developer"]));
    student2.addCourse("MERN Stack Developer");
    student2.dropCourse("AI ChatBot Developer");
    student2.displayCourses();
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  var accountNumber$ = dart.privateName(bank_account, "BankAccount.accountNumber");
  var balance$ = dart.privateName(bank_account, "BankAccount.balance");
  var accountType$ = dart.privateName(bank_account, "BankAccount.accountType");
  var interestRate$ = dart.privateName(bank_account, "BankAccount.interestRate");
  bank_account.BankAccount = class BankAccount extends core.Object {
    get accountNumber() {
      return this[accountNumber$];
    }
    set accountNumber(value) {
      this[accountNumber$] = value;
    }
    get balance() {
      return this[balance$];
    }
    set balance(value) {
      this[balance$] = value;
    }
    get accountType() {
      return this[accountType$];
    }
    set accountType(value) {
      this[accountType$] = value;
    }
    get interestRate() {
      return this[interestRate$];
    }
    set interestRate(value) {
      this[interestRate$] = value;
    }
    static ['_#new#tearOff'](accountNumber, balance, accountType, interestRate) {
      return new bank_account.BankAccount.new(accountNumber, balance, accountType, interestRate);
    }
    deposite(amount) {
      this.balance = this.balance + amount;
      core.print("Deposited Successfully.");
    }
    withDraw(amount) {
      if (this.balance >= amount) {
        this.balance = this.balance - amount;
        core.print("Withdrawn Successfully.");
      } else {
        core.print("Insufficient funds. Withdrawal unsuccessful.");
      }
    }
    addInterest() {
      this.balance = this.balance + this.balance * (this.interestRate / 100);
      core.print("Updated your balance as per your interest rate Successfully.");
    }
    display() {
      core.print("--- Account Info ---\nAccount Number: " + dart.str(this.accountNumber) + "\nBalance: " + dart.str(this.balance) + "\nAccount Type: " + this.accountType + "\nInterest Rate: " + dart.str(this.interestRate) + "\n--- --- --- ---");
    }
  };
  (bank_account.BankAccount.new = function(accountNumber, balance, accountType, interestRate) {
    this[accountNumber$] = accountNumber;
    this[balance$] = balance;
    this[accountType$] = accountType;
    this[interestRate$] = interestRate;
    ;
  }).prototype = bank_account.BankAccount.prototype;
  dart.addTypeTests(bank_account.BankAccount);
  dart.addTypeCaches(bank_account.BankAccount);
  dart.setMethodSignature(bank_account.BankAccount, () => ({
    __proto__: dart.getMethods(bank_account.BankAccount.__proto__),
    deposite: dart.fnType(dart.void, [core.int]),
    withDraw: dart.fnType(dart.void, [core.int]),
    addInterest: dart.fnType(dart.void, []),
    display: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(bank_account.BankAccount, I[0]);
  dart.setFieldSignature(bank_account.BankAccount, () => ({
    __proto__: dart.getFields(bank_account.BankAccount.__proto__),
    accountNumber: dart.fieldType(core.int),
    balance: dart.fieldType(core.double),
    accountType: dart.fieldType(core.String),
    interestRate: dart.fieldType(core.double)
  }));
  var name$ = dart.privateName(student, "Student.name");
  var id$ = dart.privateName(student, "Student.id");
  var courses$ = dart.privateName(student, "Student.courses");
  student.Student = class Student extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      this[name$] = value;
    }
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get courses() {
      return this[courses$];
    }
    set courses(value) {
      this[courses$] = value;
    }
    static ['_#new#tearOff'](name, id, courses) {
      return new student.Student.new(name, id, courses);
    }
    addCourse(course) {
      this.courses[$add](course);
      core.print("Course Added: " + course + ".");
    }
    dropCourse(course) {
      this.courses[$remove](course);
      core.print("Course Removed: " + course + ".");
    }
    displayCourses() {
      core.print("--- Student Info ---\nName: " + this.name + "\nID: " + dart.str(this.id) + "\nCourses: " + dart.str(this.courses) + "\n--- --- --- ---");
    }
  };
  (student.Student.new = function(name, id, courses) {
    this[name$] = name;
    this[id$] = id;
    this[courses$] = courses;
    ;
  }).prototype = student.Student.prototype;
  dart.addTypeTests(student.Student);
  dart.addTypeCaches(student.Student);
  dart.setMethodSignature(student.Student, () => ({
    __proto__: dart.getMethods(student.Student.__proto__),
    addCourse: dart.fnType(dart.void, [core.String]),
    dropCourse: dart.fnType(dart.void, [core.String]),
    displayCourses: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(student.Student, I[1]);
  dart.setFieldSignature(student.Student, () => ({
    __proto__: dart.getFields(student.Student.__proto__),
    name: dart.fieldType(core.String),
    id: dart.fieldType(core.int),
    courses: dart.fieldType(core.List$(core.String))
  }));
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/classes/bank_account.dart": bank_account,
    "file:///zapp/project/lib/classes/student.dart": student
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/classes/bank_account.dart","/zapp/project/lib/classes/student.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CI,IA1BF,iCAAgB;AACd,UAAoB,6BAGD;AAF8B,QAA9B,AAAkB,6BAElB,eAF2B;;AAEL,QAAF,CAApB;;AAEnB,UAAO,AAAQ,uBAAY;AAKvB,QAJK,AAAqC,qBAA7B,qCAAuB,uBAAW,QAAC;AAG9C,UAFC,AAAQ,sBAAW,2BAA2B,CAC/C;;;wBAIL,SAAC,GAAG;AACL,UAAO,AAAQ,uBAAY;AAIvB,QAHC,AAAQ,sBAAW,wBAAwB,CAC5C,AAAE,CAAD,eACD,AAAW,UAAD;;2DAGM,yCACb,SAAC,MAAM,QAAQ,MAAM;AAC1B,cAAO,AAAQ,uBAAY;AAC4B,YAAlD,AAAQ,sBAAW,wBAAwB,CAAC,IAAI;;;EAI3D;;AAEiB;AAQd,MAPD,MAAS,gCACC;AACS,UAAf;6CAEe;AACmB,UAAjB;;IAGvB;;;AClDc,uBAAe,iCAAY,QAAQ,OAAO,WAAW;AACtC,IAA3B,AAAa,YAAD,UAAU;AACM,IAA5B,AAAa,YAAD,UAAU;AACI,IAA1B,AAAa,YAAD;AACU,IAAtB,AAAa,YAAD;AACA,uBAAe,iCAAY,QAAQ,OAAO,UAAU;AACrC,IAA3B,AAAa,YAAD,UAAU;AACM,IAA5B,AAAa,YAAD,UAAU;AACI,IAA1B,AAAa,YAAD;AACU,IAAtB,AAAa,YAAD;AAGJ,mBAAW,wBAAQ,SAAS,MAAM,wBAAC,QAAQ,aAAa;AAClC,IAA9B,AAAS,QAAD,WAAW;AACM,IAAzB,AAAS,QAAD;AAEA,mBACJ,wBAAQ,SAAS,MAAM,wBAAC,wBAAwB;AACV,IAA1C,AAAS,QAAD,WAAW;AACwB,IAA3C,AAAS,QAAD,YAAY;AACK,IAAzB,AAAS,QAAD;EACV;;ECnBwB;;;;;;ICNlB;;;;;;IACG;;;;;;IACA;;;;;;IACA;;;;;;;;;aAOW;AACC,MAAjB,eAAA,AAAQ,eAAG,MAAM;AACe,MAAhC,WAAM;IACR;aAEkB;AAChB,UAAI,AAAQ,gBAAG,MAAM;AACF,QAAjB,eAAA,AAAQ,eAAG,MAAM;AACe,QAAhC,WAAM;;AAE+C,QAArD,WAAM;;IAEV;;AAG2C,MAAzC,eAAA,AAAQ,eAAG,AAAQ,gBAAG,AAAa,oBAAE;AACgC,MAArE,WAAM;IACR;;AAImK,MADjK,WACI,AAA4J,oDAAnH,sBAAc,yBAAa,gBAAQ,qBAAkB,mBAAY,+BAAmB,qBAAa;IAChJ;;2CA3BO,eACA,SACA,aACA;IAHA;IACA;IACA;IACA;;EACN;;;;;;;;;;;;;;;;;;;;;;ICTM;;;;;;IACH;;;;;;IACS;;;;;;;;;cAMS;AACD,MAAnB,AAAQ,mBAAI,MAAM;AACe,MAAjC,WAAM,AAA0B,mBAAT,MAAM,GAAC;IAChC;eAEuB;AACC,MAAtB,AAAQ,sBAAO,MAAM;AACc,MAAnC,WAAM,AAA4B,qBAAT,MAAM,GAAC;IAClC;;AAG+F,MAA7F,WAAM,AAAsF,iCAAvD,YAAK,oBAAQ,WAAG,yBAAa,gBAAQ;IAC5E;;kCAhBO,MACA,IACA;IAFA;IACA;IACA;;EACN","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__classes__bank_account: bank_account,
    zapp__project__lib__classes__student: student
  };
}));

//# sourceMappingURL=main.js.map
